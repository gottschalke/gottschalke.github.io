{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getIp","fetch","then","response","json","data","setState","ipInfo","getUserGeolocationDetails","details","isValid","state","location","city","region","country","isp","as","domain","bind","this","className","ip","href","target","React","Component","Boolean","window","hostname","match","Root","path","exact","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uPA0HeA,G,wDAtHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,MAAQ,WACNC,MAAM,sCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEC,OAAQF,QArBzB,EAwBnBG,0BAA4B,WACxBP,MAAM,wEACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEG,QAASJ,QA3B5B,EA8BnBK,QAAU,WACR,OAAO,EAAKC,OAAS,EAAKA,MAAMF,SAAW,EAAKE,MAAMF,QAAQG,UAAY,EAAKD,MAAMF,QAAQG,SAASC,MAAQ,EAAKF,MAAMF,QAAQG,SAASE,QAAU,EAAKH,MAAMF,QAAQG,SAASG,SACtK,EAAKJ,MAAMF,QAAQO,KAAO,EAAKL,MAAMF,QAAQQ,IAAM,EAAKN,MAAMF,QAAQQ,GAAGC,QA7BnF,EAAKP,MAAQ,CACXJ,OAAQ,GACRE,QAAS,CACPG,SAAU,GACVK,GAAI,KAGR,EAAKT,0BAA4B,EAAKA,0BAA0BW,KAA/B,gBACjC,EAAKnB,MAAQ,EAAKA,MAAMmB,KAAX,gBACb,EAAKT,QAAU,EAAKA,QAAQS,KAAb,gBAEf,EAAKnB,QACL,EAAKQ,4BAfY,E,qDAmCT,IAAD,EACqBY,KAAKT,MAAzBJ,EADD,EACCA,OAAQE,EADT,EACSA,QAChB,OACE,yBAAKY,UAAU,eACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,SACE,uBAAGA,UAAU,QAAQd,GAAUA,EAAOe,IACrCF,KAAKV,WAAa,6BACjB,uBAAGW,UAAU,QAAb,YACgB,IADhB,UAEUZ,EAAQG,SAASC,KAF3B,aAEoCJ,EAAQG,SAASE,OAFrD,cAEiEL,EAAQG,SAASG,UAElF,uBAAGM,UAAU,QAAb,MACQ,IADR,UAEQZ,EAAQO,MAEhB,uBAAGO,KAAMd,EAAQQ,GAAGC,OAAQM,OAAO,WAAU,uBAAGH,UAAU,QAAQZ,EAAQQ,GAAGC,WAInF,yBAAKG,UAAU,SACf,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,sBACA,yBAAKA,UAAU,kBACf,uBAAGA,UAAU,aAAb,wiDADA,MAUF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,eACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,aAAb,w9BAOJ,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,WACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,aAAb,glBAQJ,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,yBACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,aAAb,soCAQJ,yBAAKA,UAAU,QACb,wBAAIA,UAAU,aAAd,mBACA,yBAAKA,UAAU,kBACb,uBAAGA,UAAU,4BAAb,ggC,GAzGKI,IAAMC,Y,eCSLC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCRN,IAAMC,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,IAAIE,UAAWpC,OAKnCqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d9e9c93.chunk.js","sourcesContent":["import React from 'react';\r\nimport './resources/css/main.css';\r\n\r\nclass  App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ipInfo: {},\r\n      details: {\r\n        location: {},\r\n        as: {}\r\n      }\r\n    };\r\n    this.getUserGeolocationDetails = this.getUserGeolocationDetails.bind(this);\r\n    this.getIp = this.getIp.bind(this);\r\n    this.isValid = this.isValid.bind(this);\r\n\r\n    this.getIp();\r\n    this.getUserGeolocationDetails();\r\n  }\r\n\r\n  getIp = () => {\r\n    fetch(\"https://api.ipify.org/?format=json\")\r\n        .then(response => response.json())\r\n        .then(data => this.setState({ ipInfo: data }));\r\n  }\r\n\r\n  getUserGeolocationDetails = () => {\r\n      fetch(\"https://geo.ipify.org/api/v1?apiKey=at_wIlsCkMRuHE6fDN0g25cnHuqzAYBF\")\r\n          .then(response => response.json())\r\n          .then(data => this.setState({ details: data }));\r\n      };\r\n\r\n  isValid = () => {\r\n    return this.state && this.state.details && this.state.details.location && this.state.details.location.city && this.state.details.location.region && this.state.details.location.country\r\n           && this.state.details.isp && this.state.details.as && this.state.details.as.domain\r\n  };\r\n\r\n  render() {\r\n    const { ipInfo, details } = this.state;\r\n    return (\r\n      <div className=\"App content\">\r\n        <div className=\"presentation\">\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">My IP</h1>\r\n              <p className=\"text\">{ipInfo && ipInfo.ip}</p>\r\n              {this.isValid() && <div>\r\n                <p className=\"text\">\r\n                      Location:{\" \"}\r\n                      {`${details.location.city}, ${details.location.region} - ${details.location.country}`}\r\n                </p>\r\n                <p className=\"text\">\r\n                    As:{\" \"}\r\n                    {`${details.isp}`}\r\n                </p>\r\n                <a href={details.as.domain} target=\"__blank\"><p className=\"text\">{details.as.domain}</p></a>\r\n              </div>}\r\n          </div>\r\n\r\n          <div className=\"infos\">\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">What's IP Address?</h1>\r\n            <div className=\"info-paragraph\">\r\n            <p className=\"paragraph\">An Internet Protocol address (IP address) is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication. An IP address serves two main functions: host or network interface identification and location addressing.\r\n\r\nInternet Protocol version 4 (IPv4) defines an IP address as a 32-bit number. However, because of the growth of the Internet and the depletion of available IPv4 addresses, a new version of IP (IPv6), using 128 bits for the IP address, was standardized in 1998. IPv6 deployment has been ongoing since the mid-2000s.\r\n\r\nIP addresses are written and displayed in human-readable notations, such as 172.16.254.1 in IPv4, and 2001:db8:0:1234:0:567:8:1 in IPv6. The size of the routing prefix of the address is designated in CIDR notation by suffixing the address with the number of significant bits, e.g., 192.168.1.15/24, which is equivalent to the historically used subnet mask 255.255.255.0.\r\n\r\nThe IP address space is managed globally by the Internet Assigned Numbers Authority (IANA), and by five regional Internet registries (RIRs) responsible in their designated territories for assignment to local Internet registries, such as Internet service providers (ISPs), and other end users. IPv4 addresses were distributed by IANA to the RIRs in blocks of approximately 16.8 million addresses each, but have been exhausted at the IANA level since 2011. Only one of the RIRs still has a supply for local assignments in Africa. Some IPv4 addresses are reserved for private networks and are not globally unique.</p>]\r\n          </div>\r\n          </div>\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">Geolocation</h1>\r\n            <div className=\"info-paragraph\">\r\n              <p className=\"paragraph\">\r\n              In computing, Internet geolocation is software capable of deducing the geographic position of a device connected to the Internet. For example, the device's IP address can be used to determine the country, city, or post/ZIP code, determining an object's geographical location. Other methods include examination of Wi-Fi hotspots, a MAC address, image metadata.\r\n              Geolocation technology has been under development only since 1999, and the first patents were granted in 2004. The technology is already widely used in multiple industries, including e-retail, banking, media, telecommunications, education, travel, hospitality, entertainment, health care, online gaming and law enforcement, for preventing online fraud, complying with regulations, managing digital rights and serving targeted marketing content and pricing. Additionally, the U.S. Federal Communications Commission (FCC) has proposed that geolocation software might be leveraged to support 9-1-1 location determination.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">Privacy</h1>\r\n            <div className=\"info-paragraph\">\r\n              <p className=\"paragraph\">\r\n              A distinction can be made between co-operative and oppositional geolocation. In some cases, it is in the interest of users to be accurately located, for example, so that they can be offered information relevant to their location. In other cases, users prefer not to disclose their location for privacy or other reasons.\r\n\r\nTechnical measures for ensuring anonymity, such as proxy servers, can be used to circumvent restrictions imposed by geolocation software. Some sites detect the use of proxies and anonymizers, and may either block service or provide non-localized content in response.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">Errors in geolocation</h1>\r\n            <div className=\"info-paragraph\">\r\n              <p className=\"paragraph\">\r\n              If geolocation software maps IP addresses associated with an entire county or territory to a particular location (such as the geographic center of the territory), this can cause considerable problems for the people who happen to live there, as law enforcement authorities and others may mistakenly assume any crimes or other misconduct associated with the IP address to originate from that particular location.\r\n\r\nFor example, a farmstead northeast of Potwin, Kansas became the default site of 600 million IP addresses (due to their lack of fine granularity) when the Massachusetts-based digital mapping company MaxMind changed the putative geographic center of the contiguous United States from 39.8333333,-98.585522 to 38.0000,-97.0000. Since 2012, a family in Pretoria, South Africa, has been regularly visited by police or angry private citizens who believed their stolen phones were to be found in the family's backyard. This was also the result of geolocation by MaxMind. The company used the National Geospatial-Intelligence Agency's coordinates for Pretoria, which pointed to the family's house, to represent IP addresses associated with Pretoria.\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"info\">\r\n            <h1 className=\"text name\">Internet Access</h1>\r\n            <div className=\"info-paragraph\">\r\n              <p className=\"paragraph last-paragraph\">\r\n              Internet access is the ability of individuals and organizations to connect to the Internet using computer terminals, computers, and other devices; and to access services such as email and the World Wide Web. Internet access is sold by Internet service providers (ISPs) delivering connectivity at a wide range of data transfer rates via various networking technologies. Many organizations, including a growing number of municipal entities, also provide cost-free wireless access and landlines.\r\n\r\nAvailability of Internet access was once limited, but has grown rapidly. In 1995, only 0.04 percent of the world's population had access, with well over half of those living in the United States, and consumer use was through dial-up. By the first decade of the 21st century, many consumers in developed nations used faster broadband technology, and by 2014, 41 percent of the world's population had access, broadband was almost ubiquitous worldwide, and global average connection speeds exceeded one megabit per second\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n   )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst Root = () => (\r\n  <Router>\r\n    <Switch>\r\n        <Route path='/' exact component={App} />\r\n        <Route path=\"*\" component={App}/>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}